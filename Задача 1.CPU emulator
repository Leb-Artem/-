#include <stdio.h>
#include <string.h>
#include <math.h>
int main()
{
    int a = 0, b = 0, c = 0, d = 0, n, n1, n2, g;
    int cont[] = { 0, 0, 0, 0 };
    int oper = 0;
    int control = 1;
    char registers[20];
    char sub[3] = "sub";
    char mov[3] = "mov";
    char ret[3] = "ret";
    char add[3] = "add";
    int h;
    int i = 0;
    while (control != 0) {
        n2 = 0;
        n1 = 0;
        n = 0;
        i = 0;
        cont[0] = 0;
        cont[1] = 0;
        cont[2] = 0;
        cont[3] = 0;

        while ((h = getchar()) != '\n') {
            registers[i] = h;
            i++;
        }
        for (g = 0; g < 4; g++) {
            if (registers[g] == sub[g]) {
                cont[0]++;
            }
            if (registers[g] == mov[g]) {
                cont[1]++;
            }
            if (registers[g] == ret[g]) {
                cont[2]++;
            }
            if (registers[g] == add[g]) {
                cont[3]++;
            }
        }
        for (g = 0; g < 4; g++) {
            if (cont[g] == 3) {
                n = g + 1;
            }
        }
        switch (registers[4]) {
        case 97:
            n1 = 1;
            break;

        case 98:
            n1 = 2;
            break;

        case 99:
            n1 = 3;
            break;

        case 100:
            n1 = 4;
            break;
        }
        if (registers[6] > 96) {
            switch (registers[6]) {
            case 97:
                n2 = 1;
                break;

            case 98:
                n2 = 2;
                break;

            case 99:
                n2 = 3;
                break;

            case 100:
                n2 = 4;
                break;
            }
        }
        else {
            for (g = 6; g < i; g++) {
                oper = oper + (registers[g] - 48) * pow(10, i - g - 1);
            }
        }
        printf("%d, %d, %d, %d", n, n1, n2, oper);
        switch (n) {
        case 1:
            switch (n1) {
            case 1:
                switch (n2) {
                case 1:
                    a = a - a;
                    break;

                case 2:
                    a = a - b;
                    break;

                case 3:
                    a = a - c;
                    break;

                case 4:
                    a = a - d;
                    break;
                }

                break;

            case 2:
                switch (n2) {
                case 1:
                    b = b - a;
                    break;

                case 2:
                    b = b - b;
                    break;

                case 3:
                    b = b - c;
                    break;

                case 4:
                    b = b - d;
                    break;
                }
                break;

            case 3:
                switch (n2) {
                case 1:
                    c = c - a;
                    break;

                case 2:
                    c = c - b;
                    break;

                case 3:
                    c = c - c;
                    break;

                case 4:
                    c = c - d;
                    break;
                }

                break;

            case 4:
                switch (n2) {
                case 1:
                    d = d - a;
                    break;

                case 2:
                    d = d - b;
                    break;

                case 3:
                    d = d - c;
                    break;

                case 4:
                    d = d - d;
                    break;
                }

                break;
            }
            break;

        case 2:
            switch (n1) {
            case 1:
                switch (n2) {
                case 0:
                    a = oper;
                    break;

                case 1:
                    a = b;
                    break;

                case 2:
                    a = d;
                    break;

                case 3:
                    a = c;
                    break;

                case 4:
                    a = d;
                    break;
                }

                break;

            case 2:
                switch (n2) {
                case 0:
                    b = oper;
                    break;

                case 1:
                    b = a;
                    break;

                case 2:
                    b = b;
                    break;

                case 3:
                    b = c;
                    break;

                case 4:
                    b = d;
                    break;
                }
                break;

            case 3:
                switch (n2) {
                case 0:
                    c = oper;
                    break;

                case 1:
                    c = a;
                    break;

                case 2:
                    c = b;
                    break;

                case 3:
                    c = c;
                    break;

                case 4:
                    c = d;
                    break;
                }

                break;

            case 4:
                switch (n2) {
                case 0:
                    d = oper;
                    break;

                case 1:
                    d = a;
                    break;

                case 2:
                    d = b;
                    break;

                case 3:
                    d = c;
                    break;

                case 4:
                    d = d;
                    break;
                }

                break;
            }

        case 3: {
            control = 0;
        }

        case 4:
            switch (n1) {
            case 1:
                switch (n2) {
                case 1:
                    a = a + a;
                    break;

                case 2:
                    a = a + b;
                    break;

                case 3:
                    a = a + c;
                    break;

                case 4:
                    a = a + d;
                    break;
                }

                break;

            case 2:
                switch (n2) {
                case 1:
                    b = b + a;
                    break;

                case 2:
                    b = b + b;
                    break;

                case 3:
                    b = b + c;
                    break;

                case 4:
                    b = b + d;
                    break;
                }
                break;

            case 3:
                switch (n2) {
                case 1:
                    c = c + a;
                    break;

                case 2:
                    c = c + a;
                    break;

                case 3:
                    c = c + a;
                    break;

                case 4:
                    c = c + a;
                    break;
                }

                break;

            case 4:
                switch (n2) {
                case 1:
                    d = d + a;
                    break;

                case 2:
                    d = d + b;
                    break;

                case 3:
                    d = d + c;
                    break;

                case 4:
                    d = d + d;
                    break;
                }

                break;
            }
            break;

            break;
        }
    }
    return 0;
}
